/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.ProviderRole;

import business.Enterprise.CDCEnterprise;
import business.Enterprise.Enterprise;
import business.Enterprise.ProviderEnterprise;
import business.Inventory.Vaccine;
import business.order.Order;
import business.order.OrderItem;
import business.business.Business;
import business.network.Network;
import business.userAccounts.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rachita
 */
public class CreateOrderJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Business business;
    private CDCEnterprise CDC;
    private boolean isCheckedOut;
    ProviderEnterprise providerEnterprise;
    private Order order;
    private Network stateNet;
    
    public CreateOrderJPanel(JPanel userProcessContainer,Enterprise enterprise,UserAccount userAccount,Business business) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.enterprise=enterprise;
        this.userAccount=userAccount;
        this.business=business;
        for (Network country : business.getNetworkList()) {
            for (Enterprise cdc : country.getEnterpriseDirectory().getEnterpriseList()) {
                for (Network state : country.getNetWorkList()) {
                    for (Network city : state.getNetWorkList()) {
                        for (Enterprise e : city.getEnterpriseDirectory().getEnterpriseList()) {
                            if (e.getName().equals(enterprise.getName())) {

                                CDC = (CDCEnterprise) cdc;
                                stateNet = state;
                            }
                        }
                    }
                }
            }
        }
        providerEnterprise=(ProviderEnterprise) enterprise;
        populatecmbTime();
       populateVaccineJTable();
       
        if(isCheckedOut == false){
            order = new Order();
        }
    
    }
    
    private void populatecmbTime(){
        cmbtime.removeAllItems();
        for(OrderItem.Type type : OrderItem.Type.values()){
            cmbtime.addItem(type);
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnCheckout = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        VaccineJTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        btnView = new javax.swing.JButton();
        QtyJSpin = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        cmbtime = new javax.swing.JComboBox();
        btnRemove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        OrderJTable = new javax.swing.JTable();
        btnReferesh = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("   Create Order for Vaccines");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 50, 320, 43));

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 130, 110, 30));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Number Of Batches");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 400, -1, -1));

        btnAdd.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnAdd.setText("Add To Order>>");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 210, 170, 30));

        btnCheckout.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnCheckout.setText("Finalize Order >>");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });
        add(btnCheckout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 550, 180, 30));

        VaccineJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "VaccineCode", "Vaccine Name", "Vaccine Cost", "Batch Size"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(VaccineJTable);
        if (VaccineJTable.getColumnModel().getColumnCount() > 0) {
            VaccineJTable.getColumnModel().getColumn(0).setResizable(false);
            VaccineJTable.getColumnModel().getColumn(1).setResizable(false);
            VaccineJTable.getColumnModel().getColumn(2).setResizable(false);
            VaccineJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 210, 1090, 140));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("   View Order Request   ");
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(59, 510, 170, -1));

        btnView.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnView.setText("Request Shipment>>");
        btnView.setEnabled(false);
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        add(btnView, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 630, 180, 30));
        add(QtyJSpin, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 390, 70, 30));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setText("Schedule  ");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 450, -1, -1));

        add(cmbtime, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 440, 160, 30));

        btnRemove.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnRemove.setText("Remove OrderItem>>");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        add(btnRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 670, 180, 30));

        OrderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "VaccineID", "VaccineName", "Quantity", "OrderID", "Schedule", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(OrderJTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 550, 1080, 210));

        btnReferesh.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnReferesh.setText("Refresh Order Table>>");
        btnReferesh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefereshActionPerformed(evt);
            }
        });
        add(btnReferesh, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 590, 180, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void populateVaccineJTable(){
        DefaultTableModel dtm = (DefaultTableModel) VaccineJTable.getModel();
        dtm.setRowCount(0);
        for(Vaccine v: CDC.getVaccineCatalog1().getVaccineList()){
            Object[] row = new Object[4];
            row[0] = v;
            row[1] = v.getName();
            row[2] = v.getPrice();
            row[3] = v.getQuantity();
            dtm.addRow(row);
        }
    }
    
    public void refreshOrderTable(){
        int rowCount = OrderJTable.getRowCount();
        DefaultTableModel model = (DefaultTableModel)OrderJTable.getModel();
        for(int i = rowCount - 1; i >=0; i--) {
            model.removeRow(i);
        }
    }
    public void populateTable(){
        DefaultTableModel dtm = (DefaultTableModel) OrderJTable.getModel();
        dtm.setRowCount(0);
        for(OrderItem o : order.getOrderitemList()){
            Object[] row = new Object[6];
            row[0] = o;
            row[1] = o.getVaccine().getName();
            row[2] = o.getQuantity();
            row[3] = order.getOrderID();
            row[4] = o.getDaysOfOrderPlaced();
            int quantity = (int) QtyJSpin.getValue();
            row[5] =quantity * o.getPrice()*o.getQuantity();
            
            dtm.addRow(row);
        }
        
    }
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        int quantity = (int) QtyJSpin.getValue();
        int selectedRow = VaccineJTable.getSelectedRow();
        OrderItem.Type type = (OrderItem.Type) cmbtime.getSelectedItem();

        if(type==null){
            JOptionPane.showMessageDialog(null,"Please select a schedule of delivery");
            return;
        }
        Vaccine selectedVaccine;
        if (selectedRow <0){
            JOptionPane.showMessageDialog(null,"Please select a vaccine");
            return;
        }
        else {
            selectedVaccine = (Vaccine)VaccineJTable.getValueAt(selectedRow,0);
        }

        if(quantity <=0 ){
            JOptionPane.showMessageDialog(null,"please select a valid quantity");
            return;
        }

        System.out.println("orderItem quantity " + quantity);
        order.addOrderItem(selectedVaccine, quantity*selectedVaccine.getQuantity(), type.getValue(), selectedVaccine.getPrice());
        populateTable();

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed

        if(!order.getOrderitemList().isEmpty()){
            
            providerEnterprise.getOrderCatalog().addOrder(order);
            JOptionPane.showMessageDialog(null,"Order Added Successfully! Please refresh the table before proceeding with a fresh order");
            btnView.setEnabled(true);
        }
        else {
            JOptionPane.showMessageDialog(null,"Error Checking out.");
        }
        isCheckedOut = true;
        order = new Order();
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed

        SendShipmentRequestJPanel panel = new SendShipmentRequestJPanel(userProcessContainer, enterprise,userAccount,providerEnterprise.getOrderCatalog(),stateNet);
        userProcessContainer.add("SendShipmentRequestJPanel",panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int selectedrow = OrderJTable.getSelectedRow();
        if(selectedrow<0)
        {
            JOptionPane.showMessageDialog(null,"Please select an item order.");
            return;
        }
        //get the order item

        OrderItem selectedOrderItem = (OrderItem) OrderJTable.getValueAt(selectedrow,0);
        //remove

        order.removeOrderItem(selectedOrderItem);
        populateTable();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnRefereshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefereshActionPerformed
        refreshOrderTable();

    }//GEN-LAST:event_btnRefereshActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable OrderJTable;
    private javax.swing.JSpinner QtyJSpin;
    private javax.swing.JTable VaccineJTable;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnReferesh;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox cmbtime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
