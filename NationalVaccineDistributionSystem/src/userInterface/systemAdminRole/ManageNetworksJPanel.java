/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.systemAdminRole;

import business.business.Business;
import business.network.Network;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Rachita
 */
public class ManageNetworksJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageNetworksJPanel
     */
    JPanel userProcessContainer;
    private Business business;
    boolean flag = false;
    boolean flag1 = false;

    public ManageNetworksJPanel(JPanel userProcessContainer, Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        
        if(!business.getNetworkList().isEmpty())
            if(business.getNetworkList()!=null){
            populateCountryNetwork();
            }

    }

    public void populateTable() {
        Network country = (Network) cmbCountry.getSelectedItem();
        //  System.out.println("country" + country);
        String state = (String) cmbState.getSelectedItem();
        //System.out.println("state" + state + flag1);
        DefaultTableModel dtm = (DefaultTableModel) NetworkJTable.getModel();
        dtm.setRowCount(0);
        //System.out.println(item.equalsIgnoreCase("Country"));
        if(country!= null || state!=null){
        if (flag) {
            for (Network network : country.getNetWorkList()) {
                if (network.getCountry().equals(country.getCountry()) && network.getRole().equals(Network.NetworkType.State)) {
                    //System.out.println("network.getState()" + network.getState());
                    Object[] row = new Object[3];
                    row[0] = network.getState();
                    row[1] = network.getRole();
                    row[2] = network.getCreatedTime();
                    dtm.addRow(row);
                }
            }
        } else if (flag1) {
            for (Network stateNetwork : country.getNetWorkList()) {
                if (stateNetwork.getCountry().equals(country.getCountry()) && stateNetwork.getState().equals(state) && stateNetwork.getRole().equals(Network.NetworkType.State)) {
                    // System.out.println("state" + state + "stateNetwork.getState()" + stateNetwork.getState() + "stateNetwork.getCountry()" + stateNetwork.getCountry() + "stateNetwork.getRole()" + stateNetwork.getRole());
                    for (Network cityNetwork : stateNetwork.getNetWorkList()) {
                        //   System.out.println("cityNetwork" + cityNetwork.getCity());
                        Object[] row = new Object[3];
                        row[0] = cityNetwork.getCity();
                        row[1] = cityNetwork.getRole();
                        row[2] = cityNetwork.getCreatedTime();
                        dtm.addRow(row);
                    }
                }
            }
        }
    }
    }

    public void populateCountryNetwork() {
        cmbCountry.removeAllItems();
        for (Network network : business.getNetworkList()) {
            cmbCountry.addItem(network);
        }
    }

    public void populateStateNetwork() {
        Network country= (Network) cmbCountry.getSelectedItem();
        cmbState.removeAllItems();
        if(country!=null){
            for(Network countryNetwork: business.getNetworkList()){
                for(Network stateNetwork: countryNetwork.getNetWorkList()){
                    if(stateNetwork.getCountry().equals(country.getCountry())){
                        cmbState.addItem(stateNetwork.getState());
                    }
                }
            }
        }
        
    }

    public void refreshTable() {
        int rowCount = NetworkJTable.getRowCount();
        DefaultTableModel dtm = (DefaultTableModel) NetworkJTable.getModel();
        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        NetworkJTable = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmbCountry = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cmbState = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        systemJTree = new javax.swing.JTree();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("              Manage Networks ");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 50, 350, 40));

        NetworkJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "NetworkType", "Created time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(NetworkJTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 440, 990, 210));

        btnAdd.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnAdd.setText("Add New Network");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel1.add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 290, 170, 30));

        btnBack.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        jPanel1.add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 120, 30));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("Country");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 180, 70, 20));

        cmbCountry.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbCountryMouseClicked(evt);
            }
        });
        cmbCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCountryActionPerformed(evt);
            }
        });
        jPanel1.add(cmbCountry, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 170, 180, 30));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("State");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 230, 70, 20));

        cmbState.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbStateMouseClicked(evt);
            }
        });
        cmbState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStateActionPerformed(evt);
            }
        });
        jPanel1.add(cmbState, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 230, 180, 30));

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setText("Refresh>>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 360, 110, 30));

        jSplitPane1.setRightComponent(jPanel1);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("System");
        systemJTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        systemJTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                systemJTreeValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(systemJTree);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 853, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(jPanel2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void systemJTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_systemJTreeValueChanged
        populateTree();
    }//GEN-LAST:event_systemJTreeValueChanged

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        refreshTable();
        flag=false;
        flag1=false;
        AddNewNetworkJPanel panel = new AddNewNetworkJPanel(userProcessContainer, business);
        userProcessContainer.add("AddNewNetworkJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void cmbCountryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbCountryMouseClicked
      flag=true;
      flag1=false;
      populateTable();
      populateStateNetwork();
    }//GEN-LAST:event_cmbCountryMouseClicked

    private void cmbStateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbStateMouseClicked
       flag=false;
       flag1=true;
       populateTable();
    }//GEN-LAST:event_cmbStateMouseClicked

    private void cmbCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCountryActionPerformed

     
    }//GEN-LAST:event_cmbCountryActionPerformed

    private void cmbStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStateActionPerformed
   
       
    }//GEN-LAST:event_cmbStateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        populateCountryNetwork();
        flag=true;
        populateTable();
    }//GEN-LAST:event_jButton1ActionPerformed

     private void populateTree() {
        DefaultTreeModel dtm = (DefaultTreeModel) systemJTree.getModel();
        ArrayList<Network> networkList = business.getNetworkList();

        DefaultMutableTreeNode countries = new DefaultMutableTreeNode("Countries");
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) dtm.getRoot();
        root.insert(countries, 0);

        Network network;
        Network stateNetwork = null;
        Network cityNetwork = null;
        DefaultMutableTreeNode countryNode;
        DefaultMutableTreeNode stateNode = null;
        DefaultMutableTreeNode cityNode;
        ArrayList<Network> stateNetworkList;
        ArrayList<Network> cityNetworkList;

        for (int i = 0; i < networkList.size(); i++) {
            network = networkList.get(i);
            countryNode = new DefaultMutableTreeNode(network.getCountry());
            countries.insert(countryNode, i);
           // System.out.println("countryNode"  + countryNode);
                
            stateNetworkList = network.getNetWorkList();
            for (int l = 0; l < stateNetworkList.size(); l++) {
                stateNetwork = stateNetworkList.get(l);
                stateNode = new DefaultMutableTreeNode(stateNetwork.getState());
                countryNode.insert(stateNode,l);
                //System.out.println("stateNode" + stateNode);
                cityNetworkList=stateNetwork.getNetWorkList();
                for (int m = 0; m < cityNetworkList.size(); m++) {
                        cityNetwork = cityNetworkList.get(m);
                        cityNode = new DefaultMutableTreeNode(cityNetwork.getCity());
                        stateNode.insert(cityNode, m);
                }
            }

        }
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable NetworkJTable;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox cmbCountry;
    private javax.swing.JComboBox cmbState;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTree systemJTree;
    // End of variables declaration//GEN-END:variables
}
