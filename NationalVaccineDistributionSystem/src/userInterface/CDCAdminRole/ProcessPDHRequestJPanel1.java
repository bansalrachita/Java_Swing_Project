package userInterface.CDCAdminRole;

import business.Enterprise.CDCEnterprise;
import business.Enterprise.Enterprise;
import business.Enterprise.PHDEnterprise;
import business.Inventory.Batch;
import business.Inventory.Vaccine;
import business.order.OrderItem;
import business.WorkRequest.ClinicShipmentWorkRequest;
import business.WorkRequest.ProviderWorkRequest;
import business.WorkRequest.WorkRequest;
import business.business.Business;
import business.network.Network;
import business.userAccounts.UserAccount;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Rachita
 */
public class ProcessPDHRequestJPanel1 extends javax.swing.JPanel implements ActionListener{

    JPanel userProcessContainer;
    private WorkRequest request;
    private UserAccount user;
    private Enterprise enterprise;
    private Business business;
    private int totalPolpulation = 0;
    private String country;
    CDCEnterprise cDCEnterprise;
    Map<String,String> state_country;
    Map<String,Integer> country_population;
    Map<String,Integer> state_population;
    Map<String,Integer> state_selectedVaccineOrderCount;
     Vaccine TempV = new Vaccine();
     int TOTAL_POPULATION = 0;
     int TOTAL_VACCINES_ORDERED = 0;
     int VACCINE_X=0;
        
    public ProcessPDHRequestJPanel1(JPanel userProcessContainer, WorkRequest request, UserAccount user, Enterprise enterprise, Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.request = request;
        this.user = user;
        this.enterprise = enterprise;
        this.business = business;
        for (Network network : business.getNetworkList()) {
            for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (e.getName().equals(enterprise.getName())) {
                    country = network.getCountry();
                    cDCEnterprise = (CDCEnterprise) e;

                }
            }
        }

//        int population = totalPolpulation;
//        txtPopulation.setText(population + "");
      
        populatecmbVaccine();
          populatePopulation();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AllocationJTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmbVaccine = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnYes = new javax.swing.JButton();
        btnNo = new javax.swing.JButton();
        txtReason = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbVaccineName = new javax.swing.JLabel();
        vaccineName = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("         Process Public Health Depatment Request");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 30, 540, 50));

        AllocationJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "State", "State Population", "State Orderings", "Population%", "VaccineOrdered%", "Excess?", "VaccineName"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(AllocationJTable);
        if (AllocationJTable.getColumnModel().getColumnCount() > 0) {
            AllocationJTable.getColumnModel().getColumn(0).setResizable(false);
            AllocationJTable.getColumnModel().getColumn(1).setResizable(false);
            AllocationJTable.getColumnModel().getColumn(2).setResizable(false);
            AllocationJTable.getColumnModel().getColumn(5).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 330, 980, 240));

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setText("<<Back  ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, -1, -1));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Vacccine ID:  ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 190, -1, -1));

        cmbVaccine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbVaccineActionPerformed(evt);
            }
        });
        add(cmbVaccine, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, 240, 30));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("  Vaccine Allocation In Each State  ");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 300, -1, -1));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setText("Do you want to approve this request?");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 600, 240, 20));

        btnYes.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnYes.setText("Yes");
        btnYes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYesActionPerformed(evt);
            }
        });
        add(btnYes, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 600, 70, 30));

        btnNo.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnNo.setText("No");
        btnNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNoActionPerformed(evt);
            }
        });
        add(btnNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 600, 70, 30));

        txtReason.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtReason.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtReason.setEnabled(false);
        txtReason.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtReasonFocusLost(evt);
            }
        });
        add(txtReason, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 680, 310, 30));

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel9.setText("Reason");
        jLabel9.setEnabled(false);
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 690, 60, -1));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Vaccine Name:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, -1, -1));
        add(cmbVaccineName, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 240, -1, -1));
        add(vaccineName, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 240, 200, 30));
    }// </editor-fold>//GEN-END:initComponents
    private void populatePopulation(){
         // populate population
        state_country = new HashMap<String, String>();
        state_population = new HashMap<String, Integer>();
        TOTAL_POPULATION =0;
                for (Network countrynet : business.getNetworkList()) {
                    System.out.println("Inside Network : " + countrynet.getCountry());
                    System.out.println("cdcname " + enterprise.getName());
                    for (Network state : countrynet.getNetWorkList()) {
                        for (Enterprise ent : state.getEnterpriseDirectory().getEnterpriseList()) {
                            System.out.println("ent size : " + countrynet.getEnterpriseDirectory().getEnterpriseList().size());
                            //if(ent instanceof )
                            if (ent instanceof PHDEnterprise) {
                                PHDEnterprise temp = (PHDEnterprise) ent;
                                System.out.println("");
                                state_country.put(state.getState(), countrynet.getCountry());
                                if (state_population.containsKey(state.getState())) {
                                    System.out.println("Adding in state_population " + (state_population.get(state.getState()) + temp.getPopulation()));
                                    state_population.put(state.getState(), (state_population.get(state.getState()) + temp.getPopulation()));
                                    System.out.println("TempV " + TempV.getName());
                                } else {
                                    state_population.put(state.getState(), temp.getPopulation());
                                    System.out.println("TempV " + TempV.getName());
                                }
                                 if(countrynet.getCountry().equals(country))
                                  TOTAL_POPULATION += temp.getPopulation();
                            }
                        }
                    }
                }
                
                
                System.out.println("TOTAL_POPL" + TOTAL_POPULATION);
    }
    
    private void populatecmbVaccine() {
        cmbVaccine.removeAllItems();

        for (Vaccine vaccine : cDCEnterprise.getVaccineCatalog1().getVaccineList()) {
            cmbVaccine.addItem(vaccine);
//            TempV.clone(vaccine);
            TempV.setName(vaccine.getName());
        }

        
       
        
        cmbVaccine.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                TempV = (Vaccine) cmbVaccine.getSelectedItem();
            country_population = new HashMap<String, Integer>();
            vaccineName.setText(cmbVaccine.getName());
            state_selectedVaccineOrderCount = new HashMap<String, Integer>();
            VACCINE_X =0;
            
            
//            // init again
//            state_country = new HashMap<String, String>();
//            state_population = new HashMap<String, Integer>();
        
        
                System.out.println("In action event >>>>>>>>>");

               

                for (Network countrynet : business.getNetworkList()) {
                    System.out.println("Inside Network : " + countrynet.getCountry());
                    System.out.println("cdcname " + enterprise.getName());
                    for (Network state : countrynet.getNetWorkList()) {
                        System.out.println("Inside state : " + state.getState());
                        for (Network city : state.getNetWorkList()) {
                            for (Enterprise providers : city.getEnterpriseDirectory().getEnterpriseList()) {
                                for (WorkRequest wqp : providers.getWorkQueue().getWorkRequestList()) {
                                    System.out.println("wqp size " + providers.getWorkQueue().getWorkRequestList().size());
                                    if (wqp instanceof ProviderWorkRequest) {
                                        for (OrderItem oip : ((ProviderWorkRequest) wqp).getOrderRequest().getOrderitemList()) {
                                            if (TempV.getName().equals(oip.getVaccine().getName())) {
                                                System.out.println("ProviderWorkRequest Print qty: " + oip.getQuantity());
                                                System.out.println("::TempV " + TempV.getName() + " State " + state.getState()
                                                            + " qty " + oip.getQuantity() );
                                                if (state_selectedVaccineOrderCount.containsKey(TempV.getName())) {
                                                    System.out.println("Adding in TempV.getName()  "
                                                            + (state_selectedVaccineOrderCount.get(TempV.getName())
                                                            + oip.getQuantity()));
                                                    state_selectedVaccineOrderCount.put(state.getState(),
                                                            (state_selectedVaccineOrderCount.get(TempV.getName()) + oip.getQuantity()));
                                                    System.out.println(" oip.getQuantity() " + oip.getQuantity());
                                                } else {
                                                    state_selectedVaccineOrderCount.put(state.getState(), oip.getQuantity());
                                                    System.out.println("TempV " + TempV.getName());
                                                }

                                            }
                                        }
                                    } else if (wqp instanceof ClinicShipmentWorkRequest) {
                                        for (OrderItem oip : ((ClinicShipmentWorkRequest) wqp).getOrderRequest().getOrderitemList()) {
                                            if (TempV.getName().equals(oip.getVaccine().getName())) {
                                                System.out.println("ClinicShipmentWorkRequest Print qty: " + oip.getQuantity());
                                                System.out.println("::TempV " + TempV.getName() + " State " + state.getState()
                                                            + " qty " + oip.getQuantity() );   
                                                if (state_selectedVaccineOrderCount.containsKey(TempV.getName())) {
                                                    System.out.println("Adding in TempV.getName()  "
                                                            + (state_selectedVaccineOrderCount.get(TempV.getName())
                                                            + oip.getQuantity()));
                                                    state_selectedVaccineOrderCount.put(state.getState(),
                                                            (state_selectedVaccineOrderCount.get(TempV.getName()) + oip.getQuantity()));
                                                    System.out.println(" oip.getQuantity() " + oip.getQuantity());
                                                } else {
                                                    state_selectedVaccineOrderCount.put(state.getState(), oip.getQuantity());
                                                    System.out.println("TempV " + TempV.getName() + " State " + state.getState()
                                                            + " qty " + oip.getQuantity() );
                                                }
                                               
                                            }
                                        }
                                    }
                                }

                            }
                        }
                    }
                }
         

            for (Batch batch : cDCEnterprise.getInventory().getBatchList()) {
                System.out.println("VACCINE_X : " + batch.getVaccine().getName() + " :V: " + TempV.getName());
                if (batch.getVaccine().getName().equals(TempV.getName())) {
                    VACCINE_X += batch.getVaccine().getQuantity();

                }
            }   
                System.out.println("VACCINE_X  : " + VACCINE_X);
                System.out.println("PRINTING HASHMAP country_state");

                for (Map.Entry<String, String> entry : state_country.entrySet()) {
                    System.out.println("Country = " + entry.getKey() + ", State = " + entry.getValue());
                }

                System.out.println("PRINTING HASHMAP state_selectedVaccineOrderCount" + TempV.getName());
                for (Map.Entry<String, Integer> entry : state_selectedVaccineOrderCount.entrySet()) {
                    TOTAL_VACCINES_ORDERED += entry.getValue();
                    System.out.println("State = " + entry.getKey() + ", VaccineCount = " + entry.getValue());
                }

                System.out.println("PRINTING HASHMAP STATE_POP");
                for (Map.Entry<String, Integer> entry : state_population.entrySet()) {
//                    if(entry.getKey().equals(country))
//                        TOTAL_POPULATION += entry.getValue();
                    System.out.println("Country = " + entry.getKey() + ", Population = " + entry.getValue());
                }

                populateStateAllocationTable(state_country, state_selectedVaccineOrderCount, state_population);
                   System.out.println("In action event >>>>>>>>>");
            }
               
        });

    }

    private void populateStateAllocationTable(Map<String, String> state_country_map, Map<String, Integer> state_orderings,
            Map<String, Integer> state_population) {
        DefaultTableModel dtm = (DefaultTableModel) AllocationJTable.getModel();
        dtm.setRowCount(0);

        System.out.println("populateStateAllocationTable");
        for (Map.Entry<String, String> state_country_entry : state_country_map.entrySet()) {
            if (state_country_entry.getValue().equals(country)) {
                System.out.println("country : " + country + " State : " + state_country_entry.getKey());

                for (Map.Entry<String, Integer> entry : state_orderings.entrySet()) {
                    System.out.println("state_orderings " + entry.getKey() + " + " + entry.getValue() + " + " + state_country_entry.getValue());
                    if (entry.getKey().equals(state_country_entry.getKey())) {
                        System.out.println("State = " + entry.getKey()
                                + ", StateOrderedVaccines# = " + entry.getValue()
                                + ", Population = " + state_population.get(entry.getKey())
                                + ", Excess = " + "Y");

                        Object row[] = new Object[7];
                        row[0] = entry.getKey();
                        row[1] = state_population.get(entry.getKey());
                        row[2] = entry.getValue();
                        row[3] = ((((double)state_population.get(entry.getKey())) / (double) TOTAL_POPULATION )*100);
                        System.out.println("TOTAL_POPULATION " + TOTAL_POPULATION + 
                                " state_population.get(entry.getKey()) " + state_population.get(entry.getKey()) );
                        System.out.println("POPULATE0 " + 
                                (((double)state_population.get(entry.getKey())) / (double) TOTAL_POPULATION )*100);
                        
                        System.out.println("VACCINE_X " + VACCINE_X + " entry.getValue() " + entry.getValue());
                        System.out.println("POPULATE: " + (((double)entry.getValue() / (double)VACCINE_X) * 100));
                        row[4] = (((double)entry.getValue() / (double)VACCINE_X) * 100);
                        row[5] = ((((double)state_population.get(entry.getKey())) / (double) TOTAL_POPULATION )*100) <=
                                (((double)entry.getValue() / (double)VACCINE_X) * 100) ? "Y" : "N" ;
                        row[6] = TempV.getName();
                        dtm.addRow(row);

                    }
                }
            }
        }

    }
    private void btnYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYesActionPerformed

        SendRequestJPanel panel = new SendRequestJPanel(userProcessContainer, request, user, enterprise);
        userProcessContainer.add("SendRequestJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnYesActionPerformed

    private void btnNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNoActionPerformed
       // WorkRequest workRequest = (WorkRequest) request;
        txtReason.setEnabled(true);
//        txtReason.addActionListener(new ActionListener() {
//
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                request.setRequest(txtReason.getText());
//              //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//            }
//        });
        request.setStatus("Request Rejected");
    }//GEN-LAST:event_btnNoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtReasonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtReasonFocusLost
        // TODO add your handling code here:
        request.setRequest(txtReason.getText());
        System.out.println("reason " + request.getRequest());
    }//GEN-LAST:event_txtReasonFocusLost

    private void cmbVaccineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbVaccineActionPerformed
        // TODO add your handling code here:
//        cmbVaccine.addActionListener(new ActionListener() {
//
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                TempV = (Vaccine) cmbVaccine.getSelectedItem();
//            }
//        });
//        
        
    }//GEN-LAST:event_cmbVaccineActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AllocationJTable;
    private javax.swing.JButton btnNo;
    private javax.swing.JButton btnYes;
    private javax.swing.JComboBox cmbVaccine;
    private javax.swing.JLabel cmbVaccineName;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtReason;
    private javax.swing.JLabel vaccineName;
    // End of variables declaration//GEN-END:variables

//    @Override
//    public void actionPerformed(ActionEvent e) {
//        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//    }

    @Override
    public void actionPerformed(ActionEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
